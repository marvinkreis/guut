from dataclasses import dataclass
from enum import Enum
from typing import Any, Optional

from openai import AsyncOpenAI

JSON = Any  # good enough for now


class Role(Enum):
    """Represents the type of message in a ChatGPT conversation."""

    # System message that provides rules, goals and context for the conversation.
    SYSTEM = 'system'

    # User message.
    USER = 'user'

    # Generated response from the assistant. Can be a regular response or a function call.
    ASSISTANT = 'assistant'

    # Function call response.
    FUNCTION = 'function'


@dataclass
class FunctionCall:
    """Represents a function call by ChatGPT."""

    # The name of the function to be called.
    name: str

    # The arguments of the function call as JSON.
    arguments: JSON

    def to_api(self):
        """Converts the function call into the JSON representation for the OpenAI API."""
        return {'name': self.name, 'arguments': self.arguments}

    def to_readable(self):
        """Converts the function call into a readable format."""
        if isinstance(self.arguments, list):
            args = ', '.join(str(arg) for arg in self.arguments)
        elif isinstance(self.arguments, dict):
            args = ', '.join(f'{key}={value!r}' for key, value in self.arguments)
        else:
            args = repr(self.arguments)
        return f'{self.name}({args})'


@dataclass
class Message:
    # The type of message (system, user, assistant, function response).
    role: Role

    # Text content of the message. This is missing when the message is a function call.
    content: Optional[str] = None

    # Function call if present. Only for assistant messages.
    function_call: Optional[FunctionCall] = None

    # Name of the called function. Only for function call responses.
    function_name: Optional[str] = None

    # The full response object from the OpenAI API. Only for messages generated by ChatGPT.
    response: Optional[Any] = None

    def to_api(self):
        """Converts the message into the JSON representation for the OpenAI API."""
        return_dict = {
            'role': self.role.value,
            'content': self.content
        }
        if self.function_call:
            return_dict['function_call'] = self.function_call.to_api()
        if self.function_name:
            return_dict['name'] = self.function_name
        return return_dict

    def to_readable(self):
        """Converts the message into a readable format."""
        header = self.role.name
        content = ''

        if self.function_call:
            header += ' (function call)'
            content += f'{self.function_call.to_readable()}'
        elif self.function_name:
            header += f' ({self.function_name})'

        if self.content:
            content += self.content

        header = f'---- {header} {(74 - len(header)) * "-"}'
        return header + '\n' + content

    def __repr__(self):
        return self.to_readable()

    @staticmethod
    def system(content: str):
        return Message(Role.SYSTEM, content)

    @staticmethod
    def user(content: str):
        return Message(Role.USER, content)

    @staticmethod
    def function(function_name: str, content: str):
        return Message(Role.FUNCTION, content, function_name=function_name)

    @staticmethod
    def assistant(content: str = None, function_call: FunctionCall = None, response=None):
        return Message(Role.ASSISTANT, content, function_call, response)

    @staticmethod
    def from_response(response: JSON):
        message = response['choices'][0]['message']

        content = message.get('content')

        function_call_json = message.get('function_call')
        if function_call_json:
            function_call = FunctionCall(
                function_call_json['name'],
                function_call_json['arguments'])
        else:
            function_call = None

        return Message(Role.ASSISTANT, content, function_call=function_call, response=response)


class Conversation(list):
    def to_api(self):
        """Converts the conversation into the JSON representation for the OpenAI API."""
        return [msg.to_api() for msg in self]

    def to_readable(self):
        """Converts the conversation into a readable format."""
        return '\n\n'.join(msg.to_readable() for msg in self)

    def __repr__(self):
        return self.to_readable()


class ChatGPTEndpoint:
    def __init__(self, client: AsyncOpenAI):
        self.model = 'gpt-3.5-turbo-0125'
        self.client = client

    async def complete(self, conversation: Conversation, **kwargs):
        print('kwargs: ' + repr(kwargs))
        print('conversation: ' + repr(conversation.to_api()))
        return await self.client.chat.completions.create(
            model=self.model,
            messages=conversation.to_api(),
            **kwargs)
